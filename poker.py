import random
import time


class Poker:
    """
    A class trying to simulate a game of Poker

    hand ranking :    straight_flush >   quadrant  >  full_house >   flush  > straight"  >  triple   >   two_pairs    >  pair > none
        Royal_flush >     9
        quadrant  >       8
        full_house >      7
        flush  >          6
        straight"  >      5
        triple   >        4
        two_pairs    >    3
        pair >            2
        none >            1

    4 types of suites of same ranking :  ♠  ,♥  ,♣  ,♦

    player = Poker(  [(14, 4, '♠ A'), (14, 3, '♥ A'), (14, 2, '♣ A'), (14, 1, '♦ A'), (13, 4, '♠ K')] )
    player.rank created at the same time
    print (player)   = >   ['♥ 3', '♠ 3', '♣ 8', '♥ 8', '♠ Q']
    print(player.rank)  = >  ['3 two_pairs', 8, 3, 12, 0, 0]

    player.change_cards(indices)       = >     pass the list  'indices'  of which the card you want to change,
    so  player.change_cards(0,1,2,3)   = >     will change the first 4 cards

    comp_choice_to_change()  = >  this is method for decision making generated by computer of which
    cards to change in order to get a higher ranking; but at the same time  keeping the useful cards


        """

    deck = [(14, 4, '♠ A'), (14, 3, '♥ A'), (14, 2, '♣ A'), (14, 1, '♦ A'), (13, 4, '♠ K'), (13, 3, '♥ K'),
            (13, 2, '♣ K'), (13, 1, '♦ K'), (12, 4, '♠ Q'), (12, 3, '♥ Q'), (12, 2, '♣ Q'), (12, 1, '♦ Q'),
            (11, 4, '♠ J'), (11, 3, '♥ J'), (11, 2, '♣ J'), (11, 1, '♦ J'), (10, 4, '♠ 10'), (10, 3, '♥ 10'),
            (10, 2, '♣ 10'), (10, 1, '♦ 10'), (9, 4, '♠ 9'), (9, 3, '♥ 9'), (9, 2, '♣ 9'), (9, 1, '♦ 9'),
            (8, 4, '♠ 8'), (8, 3, '♥ 8'), (8, 2, '♣ 8'), (8, 1, '♦ 8'), (7, 4, '♠ 7'), (7, 3, '♥ 7'),
            (7, 2, '♣ 7'), (7, 1, '♦ 7'), (6, 4, '♠ 6'), (6, 3, '♥ 6'), (6, 2, '♣ 6'), (6, 1, '♦ 6'),
            (5, 4, '♠ 5'), (5, 3, '♥ 5'), (5, 2, '♣ 5'), (5, 1, '♦ 5'), (4, 4, '♠ 4'), (4, 3, '♥ 4'),
            (4, 2, '♣ 4'), (4, 1, '♦ 4'), (3, 4, '♠ 3'), (3, 3, '♥ 3'), (3, 2, '♣ 3'), (3, 1, '♦ 3'),
            (2, 4, '♠ 2'), (2, 3, '♥ 2'), (2, 2, '♣ 2'), (2, 1, '♦ 2')]
    cards_main = deck.copy()

    def __init__(self, cards=None):
        self.rank = []
        self.hand = []
        self.score=0
        if cards is not None:
            self.hand = cards
        else:
            for i in range(5):
                rand = random.choice(Poker.cards_main)
                self.hand.append(rand)
                Poker.cards_main.remove(rand)
        self.hand.sort()

        self.cards_list = [card[0] for card in self.hand]
        self.suites_list = [card[1] for card in self.hand]

        self.best_hand()
        print(self)
    def renew(self):
        self.hand=[]
        for i in range(5):
            rand = random.choice(Poker.cards_main)
            self.hand.append(rand)
            Poker.cards_main.remove(rand)
        self.hand.sort()
        self.cards_list = [card[0] for card in self.hand]
        self.suites_list = [card[1] for card in self.hand]

        self.best_hand()
        print(self)


    def __repr__(self):
        self.best_hand()
        # templist = list(map(lambda x: x[2], self.hand))

        templist = [x[2] for x in self.hand]
        return repr(templist) + " \t" + repr(self.rank)

    @staticmethod
    def cards_shuffle():
        random.seed(time.time())
        random.shuffle(Poker.cards_main)
        print(Poker.cards_main)

    @staticmethod
    def is_higher_rank(player1, player2):
        from operator import itemgetter
        rank_list = (player1.rank, player2.rank)
        rank_list = sorted(rank_list, key=itemgetter(0, 1, 2, 3, 4, 5))
        if player1.rank == rank_list[1]:
            return True
        return False

    def change_cards(self, indices):
        if indices == []:
            return
        for index in indices:
            self.hand.pop(index)
            self.hand.insert(index, Poker.cards_main[0])
            Poker.cards_main.pop(0)
        self.hand.sort()
        self.cards_list = [card[0] for card in self.hand]
        self.suites_list = [card[1] for card in self.hand]
        self.best_hand()

    @staticmethod
    def is_4_in_series(cards):
        for i in range(2):
            if cards[i] + 1 == cards[i + 1] and cards[i + 1] + 1 == cards[i + 2] and cards[i + 2] + 1 == cards[i + 3]:
                return True, i
        return False, 0

    @staticmethod
    def is_4_of_same_suite(suites):
        for suite in suites:
            if suites.count(suite) == 4:
                for i in range(5):
                    if suites.count(suites[i]) == 1:
                        return True, i
        return False, 0

    @staticmethod
    def is_3_in_series(cards):
        for i in range(3):
            if cards[i] + 1 == cards[i + 1] and cards[i + 1] + 1 == cards[i + 2]:
                return True, i
        return False, 0

    def comp_choice_to_change(self):
        suites_list = self.suites_list
        cards_list = self.cards_list
        change_list = []
        four_series, pos_ = Poker.is_4_in_series(cards_list)
        three_series, pos = Poker.is_3_in_series(cards_list)
        suite_4_series, spos = Poker.is_4_of_same_suite(suites_list)

        if self.rank[0] == '8 quadrant' or self.rank[0] == '7 full_house' or self.rank[0] == "9 straight_flush" or \
                self.rank[0] == '6 flush' or self.rank[0] == '5 straight':
            print("no need to change")
            return []
        elif self.rank[0] == '4 triple':  # find out the odds, output in the changes list
            for i, obj in enumerate(cards_list):
                if cards_list.count(obj) == 1:
                    change_list.append(i)
            return change_list
        elif self.rank[0] == '3 two_pairs':  # find out and output the single card in the change list
            for i, obj in enumerate(cards_list):
                if cards_list.count(obj) == 1:
                    return [i, ]
        elif self.rank[0] == '2 pair':
            for i, obj in enumerate(cards_list):
                if cards_list.count(obj) == 1:
                    change_list.append(i)
            return change_list

        elif suite_4_series:  # for 4 cards of the same suite output the odds position
            return [spos, ]
        elif four_series:  # for four cards in series ; find out and decide if  output to  the change list or not
            if pos_ == 0:
                return [4, ]
            elif pos_ == 1:
                return [0, ]
        elif three_series:  # for three cards in series ; find out and decide if  output to  the change list or not
            if cards_list[0] == 2 and cards_list[1] == 3 and cards_list[2] == 4 and cards_list[4] == 14:
                return [3, ]

            if cards_list[0] == 3 and cards_list[1] == 4 and cards_list[2] == 5 and cards_list[4] == 14:
                return [3, ]
            if pos == 0:
                if cards_list[2] + 2 == cards_list[4]:
                    return [3, ]
                if cards_list[2] + 2 == cards_list[3]:
                    return [4, ]
                return [0, 1, 2, 3, 4]
            elif pos == 1:
                if cards_list[3] + 2 == cards_list[4]:
                    return [0, ]
                if cards_list[0] + 2 == cards_list[1]:
                    return [4, ]
                return [0, 1, 2, 3, 4]
            elif pos == 2:
                if cards_list[1] + 2 == cards_list[2]:
                    return [0, ]
                if cards_list[0] + 2 == cards_list[2]:
                    return [1, ]
                return [0, 1, 2, 3, 4]
        elif cards_list[3] > 11:
            return [0, 1, 2]
        elif cards_list[4] > 12:
            return [0, 1, 2, 3]
        else:
            return [0, 1, 2, 3, 4]

    def flush(self):
        if len(set(self.suites_list)) == 1:
            self.rank = ['6 flush', self.hand[4][0], self.hand[3][0], self.hand[2][0], self.hand[1][0],
                         self.hand[0][0]]
            return True
        return False

    def royal_flush(self):
        cards_list = self.cards_list
        if len(set(self.suites_list)) == 1:
            if cards_list == [2, 3, 4, 5, 14]:
                self.rank = ["9 straight_flush", 5, 0, 0, 0, 0]
                return True
            for i in range(len(cards_list) - 1):
                if cards_list[i] + 1 != cards_list[i + 1]:
                    return False
            self.rank = ["9 straight_flush", self.hand[4][0], 0, 0, 0, 0]
            return True

    def straight(self):
        cards_list = self.cards_list
        if cards_list == [2, 3, 4, 5, 14]:
            self.rank = ['5 straight', 5, 0, 0, 0, 0]
            return True
        for i in range(len(cards_list) - 1):
            if cards_list[i] + 1 != cards_list[i + 1]:
                return False
        self.rank = ['5 straight', self.hand[4][0], 0, 0, 0, 0]
        return True

    def quadrant(self):
        cards_list = self.cards_list
        if cards_list.count(cards_list[2]) == 4:
            self.rank = ['8 quadrant', self.hand[2][0], 0, 0, 0, 0]
            return True
        return False

    def full_house(self):
        cards_list = self.cards_list
        if cards_list.count(cards_list[0]) == 3 and cards_list.count(cards_list[4]) == 2:
            self.rank = ['7 full_house', self.hand[2][0], 0, 0, 0, 0]
            return True
        if cards_list.count(cards_list[0]) == 2 and cards_list.count(cards_list[4]) == 3:
            self.rank = ['7 full_house', self.hand[2][0], 0, 0, 0, 0]
            return True
        return False

    def triple(self):
        cards_list = self.cards_list
        if cards_list.count(cards_list[2]) == 3:
            self.rank = ['4 triple', self.hand[2][0], 0, 0, 0, 0]
            return True
        return False

    def two_pairs(self):
        cards_list = self.cards_list
        if cards_list.count(cards_list[1]) == 2 and cards_list.count(cards_list[3]) == 2:
            if cards_list.count(cards_list[4]) == 1:
                self.rank = ['3 two_pairs', self.hand[3][0], self.hand[1][0], self.hand[4][0], 0, 0]
                return True
            if cards_list.count(cards_list[2]) == 1:
                self.rank = ['3 two_pairs', self.hand[3][0], self.hand[1][0], self.hand[2][0], 0, 0]
                return True
            if cards_list.count(cards_list[0]) == 1:
                self.rank = ['3 two_pairs', self.hand[3][0], self.hand[1][0], self.hand[0][0], 0, 0]
                return True
        return False

    def pair(self):
        if self.hand[0][0] == self.hand[1][0]:
            self.rank = ['2 pair', self.hand[1][0], self.hand[4][0], self.hand[3][0], self.hand[2][0], 0]
            return True
        if self.hand[1][0] == self.hand[2][0]:
            self.rank = ['2 pair', self.hand[2][0], self.hand[4][0], self.hand[3][0], self.hand[0][0], 0]
            return True
        if self.hand[2][0] == self.hand[3][0]:
            self.rank = ['2 pair', self.hand[3][0], self.hand[4][0], self.hand[1][0], self.hand[0][0], 0]
            return True
        if self.hand[3][0] == self.hand[4][0]:
            self.rank = ['2 pair', self.hand[3][0], self.hand[2][0], self.hand[1][0], self.hand[0][0], 0]
            return True
        return False

    def none(self):
        self.rank = ["1 none", self.hand[4][0], self.hand[3][0], self.hand[2][0], self.hand[1][0], self.hand[0][0]]

    def best_hand(self):
        if self.royal_flush() is True:
            return
        elif self.flush() is True:
            return
        elif self.quadrant() is True:
            return
        elif self.full_house() is True:
            return
        elif self.triple() is True:
            return
        elif self.two_pairs() is True:
            return
        elif self.pair() is True:
            return
        elif self.straight() is True:
            return
        else:
            self.none()


Poker.cards_shuffle()

p2 = Poker([(2, 1, '♦ 2'), (3, 1, '♦ 3'), (4, 2, '♣ 4'), (2, 2, '♣ 2'), (14, 2, '♣ A')])
# p2= Poker([(13, 1, '♦ K'), (4,4, '♠ 4'), (4, 4, '♠ 4'), (4, 1, '♦ 4'), (12,1, '♦Q')])
# p2=Poker([(14, 3, '♥ A'), (3, 1, '♦ 3'), (6, 4, '♠ 6'), (11, 3, '♥ J'), (12, 2, '♣ Q')])
# p2= Poker([(2, 1, '♦ 2'), (2,3, '♥ 2'), (2, 3, '♠2'), (9, 4, '♠ 9'), (9,1, '♦9')])

# p2=Poker([(9, 3, '♥ 9'), (6, 2, '♣ 6'), (4, 4, '♠ 4'), (4, 2, '♣ 4'), (2, 1, '♦ 2')])




"""
 # Poker.cards_shuffle()
    # Poker.game(6)

    #p2 = Poker([(6, 2, '♣ 6'), (7, 2, '♣ 7'), (8, 2, '♣ 8'), (8,2, '♣9'), (14, 2, '♣ 14')])
    #p2= Poker([(13, 1, '♦ K'), (4,4, '♠ 4'), (4, 4, '♠ 4'), (4, 1, '♦ 4'), (12,1, '♦Q')])
    #p2=Poker([(14, 3, '♥ A'), (3, 1, '♦ 3'), (6, 4, '♠ 6'), (11, 3, '♥ J'), (12, 2, '♣ Q')])
    #p2= Poker([(2, 1, '♦ 2'), (2,3, '♥ 2'), (2, 3, '♠2'), (9, 4, '♠ 9'), (9,1, '♦9')])

    p2=Poker([(9, 3, '♥ 9'), (6, 2, '♣ 6'), (4, 4, '♠ 4'), (4, 2, '♣ 4'), (2, 1, '♦ 2')])

    Poker.cards_shuffle()
    print(p2.comp_choice_to_change())
    p2.change_cards(p2.comp_choice_to_change())

    ['♦ 2', '♥ 2', '♥ 9', '♠ 9', '♥ K']

    print(Poker.cards_main)
    print(p2)




"""
